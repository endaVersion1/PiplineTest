# Node.js

# Build a general Node.js project with npm.

# Add steps that analyze code, save build artifacts, deploy, and more:

# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

name: Aarti Pipline

schedules:
- cron: "0 0 * * *"
  displayName: "Run Pipeline every Monday - Friday at 6:00am"
  branches:
    include:
    - master  # Replace with the branch you want to build
trigger:
  branches:
    include:
      - master

pool:
 vmImage: ubuntu-latest

steps:
- task: NodeTool@0
  inputs:
    versionSpec: '16.17.1'
  displayName: 'Install Node.js and Build'
    script: |
        npm install
        npx wdio wdio.conf.js

- task: PowerShell@2
  condition: succeededOrFailed()
  inputs:
    targetType: 'inline'
    script: |      
      Get-UICulture
      function Set-CultureWin([System.Globalization.CultureInfo] $culture) { [System.Threading.Thread]::CurrentThread.CurrentUICulture = $culture ; [System.Threading.Thread]::CurrentThread.CurrentCulture = $culture } ; Set-CultureWin en-GB ; Get-Date;[system.threading.thread]::currentthread.currentculture.DateTimeFormat.ShortDatePattern = 'dd/MM/yyyy';[System.Threading.Thread]::CurrentThread.currentculture.DateTimeFormat.ShortDatePattern
      Get-UICulture
      (Get-UICulture).DateTimeFormat.ShortDatePattern
      Get-Date

- script: |
    npx wdio wdio.conf.js

- task: PublishCodeCoverageResults@1
  condition: succeededOrFailed()
  inputs: 
    codeCoverageTool: Cobertura
    summaryFileLocation: 'coverage/cobertura-coverage.xml'
    reportDirectory: '$(System.DefaultWorkingDirectory)/**/coverage'

- task: PublishTestResults@2
  condition: succeededOrFailed()
  inputs:
    testResultsFormat: 'JUnit'
    testResultsFiles: '*.xml'

- task: CopyFiles@2
  condition: succeededOrFailed()
  inputs:
    SourceFolder: '$(Build.SourcesDirectory)'
    Contents: '**.png'
    TargetFolder: '$(Build.ArtifactStagingDirectory)'
  displayName: 'Copy project files'

- task: PublishPipelineArtifact@1
  condition: succeededOrFailed()
  inputs:
    artifactName: e2e-server
    targetPath: '$(Build.SourcesDirectory)'
    publishLocation: 'pipeline'
  displayName: 'Publish npm artifact'

- task: PublishPipelineArtifact@0
  displayName: 'Publish Screenshots'
  condition: failed()
  inputs:
    artifactName: 'Screenshots'
    targetPath: '$(Build.SourcesDirectory)/ADOScreenshots'

- task: PowerShell@2
  condition: succeededOrFailed()
  inputs:
    targetType: 'inline'
    script: |      
      Get-ChildItem -Path $(Build.SourcesDirectory) -recurse -force

- task: CmdLine@2
  condition: succeededOrFailed()
  inputs:
    script: |
      echo "$(Build.SourcesDirectory)"
      tree $(Build.SourcesDirectory)